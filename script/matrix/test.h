/* THIS FILE IS AUTO GENERATED. DO NOT EDIT. */
#include "oled.h"
#include <stdint.h>
#include <stdbool.h>
#include "system.h"

#ifndef DINO_PICS_H
#define DINO_PICS_H

const uint8_t _GAME_OVER_TEXT_DATA[] = {0xff, 0xff, 0x83, 0x1, 0x3d, 0x7d, 0x69, 0x9, 0xb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7, 0x3, 0xd9, 0xd9, 0xd9, 0x7, 0x7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x1, 0xf3, 0xe7, 0xf3, 0x1, 0x1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x1, 0x6d, 0x6d, 0x6d, 0x6d, 0x7d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x83, 0x7d, 0x7d, 0x7d, 0x7d, 0x83, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xc1, 0x8f, 0x1f, 0x8f, 0xc1, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x1, 0x6d, 0x6d, 0x6d, 0x6d, 0x7d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x1, 0xed, 0xcd, 0x8d, 0x23, 0x63, 0xff, 0xff};
fi_matrix_t GAME_OVER_TEXT = {_GAME_OVER_TEXT_DATA, 128, 8};

const uint8_t _NUM_0_DATA[] = {0x0, 0xe, 0x0};
fi_matrix_t NUM_0 = {_NUM_0_DATA, 3, 5};

const uint8_t _NUM_1_DATA[] = {0x1f, 0x0, 0x1f};
fi_matrix_t NUM_1 = {_NUM_1_DATA, 3, 5};

const uint8_t _NUM_2_DATA[] = {0x2, 0xa, 0x8};
fi_matrix_t NUM_2 = {_NUM_2_DATA, 3, 5};

const uint8_t _NUM_3_DATA[] = {0xa, 0xa, 0x0};
fi_matrix_t NUM_3 = {_NUM_3_DATA, 3, 5};

const uint8_t _NUM_4_DATA[] = {0x18, 0x1b, 0x0};
fi_matrix_t NUM_4 = {_NUM_4_DATA, 3, 5};

const uint8_t _NUM_5_DATA[] = {0x8, 0xa, 0x2};
fi_matrix_t NUM_5 = {_NUM_5_DATA, 3, 5};

const uint8_t _NUM_6_DATA[] = {0x0, 0xa, 0x2};
fi_matrix_t NUM_6 = {_NUM_6_DATA, 3, 5};

const uint8_t _NUM_7_DATA[] = {0x1e, 0x1e, 0x0};
fi_matrix_t NUM_7 = {_NUM_7_DATA, 3, 5};

const uint8_t _NUM_8_DATA[] = {0x0, 0xa, 0x0};
fi_matrix_t NUM_8 = {_NUM_8_DATA, 3, 5};

const uint8_t _NUM_9_DATA[] = {0x8, 0xa, 0x0};
fi_matrix_t NUM_9 = {_NUM_9_DATA, 3, 5};

const uint8_t _DINO_STANDING_DATA[] = {0x80, 0x80, 0x80, 0x80, 0x0, 0x0, 0x0, 0x0, 0xe7, 0xcf, 0xf, 0x83, 0x40, 0xf1, 0xfc, 0xfc};
fi_matrix_t DINO_STANDING = {_DINO_STANDING_DATA, 8, 9};

const uint8_t _DINO_LYING_DATA[] = {0xe0, 0xc8, 0x88, 0x0, 0xc0, 0xc8, 0xc8, 0xd0, 0xc0, 0xc8};
fi_matrix_t DINO_LYING = {_DINO_LYING_DATA, 10, 5};

const uint8_t _BIRD_LOW_DOWN_DATA[] = {0x7b, 0x79, 0x78, 0x73, 0x3, 0x43, 0x63, 0x67, 0x67, 0x77};
fi_matrix_t BIRD_LOW_DOWN = {_BIRD_LOW_DOWN_DATA, 10, 7};

const uint8_t _BIRD_LOW_UP_DATA[] = {0x17, 0x13, 0x11, 0x13, 0x10, 0x1, 0x3, 0x7, 0x7, 0x7, 0x17};
fi_matrix_t BIRD_LOW_UP = {_BIRD_LOW_UP_DATA, 11, 5};

const uint8_t _BIRD_HIGH_DOWN_DATA[] = {0x7b, 0x79, 0x78, 0x73, 0x3, 0x43, 0x63, 0x67, 0x67, 0x67};
fi_matrix_t BIRD_HIGH_DOWN = {_BIRD_HIGH_DOWN_DATA, 10, 7};

const uint8_t _BIRD_HIGH_UP_DATA[] = {0x37, 0x33, 0x31, 0x33, 0x20, 0x1, 0x3, 0xf, 0xf, 0xf, 0x2f};
fi_matrix_t BIRD_HIGH_UP = {_BIRD_HIGH_UP_DATA, 11, 6};

const uint8_t _PLANT_SMALL_DATA[] = {0xe3, 0x0, 0x0, 0xf1};
fi_matrix_t PLANT_SMALL = {_PLANT_SMALL_DATA, 4, 8};

const uint8_t _PLANT_BIG_DATA[] = {0xe3, 0x0, 0x0, 0xf1, 0x9f, 0xf, 0x9f, 0xf1, 0x0, 0x0, 0xe3};
fi_matrix_t PLANT_BIG = {_PLANT_BIG_DATA, 11, 8};

const uint8_t _LAND_DATA[] = {0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1a, 0x1a, 0x1e, 0x1e, 0xe, 0xe, 0x1e, 0x1e, 0x1e, 0x1a, 0x1a, 0x1e, 0x1e, 0xe, 0x1e, 0x1e, 0x1a, 0x1a, 0x1a, 0x1a, 0x1e, 0x1e, 0x1e, 0xe, 0xe, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1a, 0x1a, 0x1a, 0x1a, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0xe, 0x1e, 0x1e, 0x1e, 0x1a, 0x1e, 0x1e, 0x1e, 0x1e, 0xe, 0xe, 0xe, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1a, 0x1a, 0x1a, 0x1a, 0xe, 0xe, 0x1e, 0x1e, 0x1e, 0x1e, 0xe, 0xe, 0xe, 0xe, 0x1e, 0x1a, 0x1e, 0x1e, 0x1a, 0x1a, 0x1a, 0x1a, 0x1e, 0x1e, 0x1e, 0xe, 0xe, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0xe, 0xe, 0xe, 0x1e, 0x1e, 0x1e, 0x1a, 0x1e, 0x1a, 0x1e, 0x1e, 0x1e, 0x1e, 0xe, 0xe, 0xe, 0xe, 0xe, 0x1a};
fi_matrix_t LAND = {_LAND_DATA, 128, 5};

fi_matrix_t NUMS[] = {NUM_0, NUM_1, NUM_2, NUM_3, NUM_4, NUM_5, NUM_6, NUM_7, NUM_8, NUM_9};

void land(uint8_t scroll) {
    fi_OLED_drawPic(scroll, 56, 128 - scroll, LAND.height, LAND.matrix);
    fi_OLED_drawPic(0, 56, scroll, LAND.height, LAND.matrix);
}


void dino(uint8_t height, bool isLying) {
    if (isLying) {
        fi_OLED_drawPic(8, 48, DINO_LYING.width, DINO_LYING.height, DINO_LYING.matrix);
    } else {
    fi_OLED_drawPic(8, 40, shiftedPic.width, shiftedPic.height, shiftedPic.matrix);
    }
}


void object(uint8_t x, uint8_t type) {
    if (type == 0) {
        fi_OLED_drawPic(x, 40, BIRD_HIGH_UP.width, BIRD_HIGH_UP.height, BIRD_HIGH_UP.matrix);
    } else if (type == 1) {
        fi_OLED_drawPic(x, 40, BIRD_HIGH_DOWN.width, BIRD_HIGH_DOWN.height, BIRD_HIGH_DOWN.matrix);
    }
}


void score(uint8_t score) {
    fi_OLED_drawPic(100, 8, NUMS[d4].width, NUMS[d4].height, NUMS[d4].matrix);
    fi_OLED_drawPic(104, 8, NUMS[d3].width, NUMS[d3].height, NUMS[d3].matrix);
    fi_OLED_drawPic(108, 8, NUMS[d2].width, NUMS[d2].height, NUMS[d2].matrix);
    fi_OLED_drawPic(112, 8, NUMS[d1].width, NUMS[d1].height, NUMS[d1].matrix);
}


void gameOver() {
    fi_OLED_drawPic(0, 24, GAME_OVER_TEXT.width, GAME_OVER_TEXT.height, GAME_OVER_TEXT.matrix);
}


void test() {
    fi_OLED_drawPic(0, 0, 0, 0, GAME_OVER_TEXT.matrix);
    if (aaa) {
        fi_OLED_drawPic(0, 0, 0, 0, a.matrix);
        if (bbb) {
            fi_OLED_drawPic(0, 0, 0, 0, b.matrix);
        } else {
        fi_OLED_drawPic(0, 0, 0, 0, c.matrix);
        }
    } else {
    fi_OLED_drawPic(0, 0, 0, 0, d.matrix);
    }
}


#endif
